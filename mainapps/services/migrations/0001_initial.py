# Generated by Django 5.1.7 on 2025-06-22 17:31

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        help_text="Country of the address",
                        max_length=255,
                        null=True,
                        verbose_name="Country",
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True,
                        help_text="Region or state within the country",
                        max_length=255,
                        null=True,
                        verbose_name="Region/State",
                    ),
                ),
                (
                    "subregion",
                    models.CharField(
                        blank=True,
                        help_text="Subregion or province within the region",
                        max_length=255,
                        null=True,
                        verbose_name="Subregion/Province",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        help_text="City of the address",
                        max_length=255,
                        null=True,
                        verbose_name="City",
                    ),
                ),
                (
                    "apt_number",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Apartment number"
                    ),
                ),
                (
                    "street_number",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Street number"
                    ),
                ),
                ("street", models.CharField(max_length=255, null=True)),
                (
                    "postal_code",
                    models.CharField(
                        blank=True,
                        help_text="Postal code",
                        max_length=10,
                        null=True,
                        verbose_name="Postal code",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Geographical latitude of the address",
                        max_digits=9,
                        null=True,
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Geographical longitude of the address",
                        max_digits=9,
                        null=True,
                        verbose_name="Longitude",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ServiceCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=50)),
                (
                    "is_professional",
                    models.BooleanField(
                        default=True,
                        help_text="True for professional services, False for personal services",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="services.servicecategory",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Service Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "profile_id",
                    models.CharField(
                        help_text="Reference to CompanyProfile ID from users service",
                        max_length=50,
                    ),
                ),
                (
                    "created_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "modified_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("slug", models.SlugField(max_length=255)),
                ("description", models.TextField()),
                ("short_description", models.CharField(blank=True, max_length=500)),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("cleaning", "Cleaning"),
                            ("repair", "Repair & Maintenance"),
                            ("tutoring", "Tutoring"),
                            ("legal", "Legal Services"),
                            ("financial", "Financial Services"),
                            ("consulting", "Consulting"),
                            ("plumbing", "Plumbing"),
                            ("electrical", "Electrical"),
                            ("carpentry", "Carpentry"),
                            ("painting", "Painting"),
                            ("moving", "Moving Services"),
                            ("landscaping", "Landscaping"),
                            ("beauty", "Beauty Services"),
                            ("spa", "Spa & Wellness"),
                            ("pet_care", "Pet Care"),
                            ("massage", "Massage Therapy"),
                            ("hair_salon", "Hair Salon"),
                            ("nail_salon", "Nail Salon"),
                            ("fitness", "Personal Training"),
                            ("photography", "Photography"),
                            ("catering", "Personal Catering"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "pricing_type",
                    models.CharField(
                        choices=[
                            ("hourly", "Hourly Rate"),
                            ("fixed", "Fixed Price"),
                            ("quote", "Custom Quote"),
                            ("package", "Package Deal"),
                        ],
                        default="hourly",
                        max_length=20,
                    ),
                ),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "fixed_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "minimum_charge",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("estimated_duration", models.DurationField(blank=True, null=True)),
                ("materials_included", models.BooleanField(default=False)),
                (
                    "travel_charge",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=6
                    ),
                ),
                (
                    "customer_requirements",
                    models.TextField(
                        blank=True, help_text="What the customer needs to prepare"
                    ),
                ),
                (
                    "tools_equipment",
                    models.TextField(
                        blank=True, help_text="Tools/equipment the provider brings"
                    ),
                ),
                (
                    "available_days",
                    models.JSONField(
                        default=list,
                        help_text="List of available days (0=Monday, 6=Sunday)",
                    ),
                ),
                ("available_hours_start", models.TimeField(default="09:00")),
                ("available_hours_end", models.TimeField(default="17:00")),
                (
                    "advance_booking_required",
                    models.DurationField(
                        blank=True,
                        help_text="Minimum advance booking time required",
                        null=True,
                    ),
                ),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("total_reviews", models.PositiveIntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("requires_consultation", models.BooleanField(default=False)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="services.servicecategory",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ServiceImage",
            fields=[
                (
                    "profile_id",
                    models.CharField(
                        help_text="Reference to CompanyProfile ID from users service",
                        max_length=50,
                    ),
                ),
                (
                    "created_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "modified_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("image", models.ImageField(upload_to="services/%Y/%m/%d/")),
                ("caption", models.CharField(blank=True, max_length=255)),
                ("alt_text", models.CharField(blank=True, max_length=255)),
                ("is_primary", models.BooleanField(default=False)),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="services.service",
                    ),
                ),
            ],
            options={
                "ordering": ["order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="ServiceProvider",
            fields=[
                (
                    "profile_id",
                    models.CharField(
                        help_text="Reference to CompanyProfile ID from users service",
                        max_length=50,
                    ),
                ),
                (
                    "created_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "modified_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("business_name", models.CharField(max_length=255)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("description", models.TextField()),
                ("short_description", models.CharField(blank=True, max_length=500)),
                ("phone", models.CharField(max_length=20)),
                ("email", models.EmailField(max_length=254)),
                ("website", models.URLField(blank=True)),
                (
                    "service_radius",
                    models.PositiveIntegerField(
                        default=10, help_text="Service radius in kilometers"
                    ),
                ),
                ("license_number", models.CharField(blank=True, max_length=100)),
                ("insurance_policy", models.CharField(blank=True, max_length=100)),
                ("years_in_business", models.PositiveIntegerField(default=0)),
                ("employee_count", models.PositiveIntegerField(default=1)),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("total_reviews", models.PositiveIntegerField(default=0)),
                ("total_jobs_completed", models.PositiveIntegerField(default=0)),
                ("is_available", models.BooleanField(default=True)),
                (
                    "response_time",
                    models.DurationField(
                        blank=True,
                        help_text="Average response time to inquiries",
                        null=True,
                    ),
                ),
                (
                    "hourly_rate_min",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "hourly_rate_max",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("currency", models.CharField(max_length=3, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("background_checked", models.BooleanField(default=False)),
                ("meta_title", models.CharField(blank=True, max_length=255)),
                ("meta_description", models.CharField(blank=True, max_length=500)),
                (
                    "address",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="services.address",
                    ),
                ),
                (
                    "specializations",
                    models.ManyToManyField(
                        blank=True,
                        related_name="providers",
                        to="services.servicecategory",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ServiceCertification",
            fields=[
                (
                    "profile_id",
                    models.CharField(
                        help_text="Reference to CompanyProfile ID from users service",
                        max_length=50,
                    ),
                ),
                (
                    "created_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "modified_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("issuing_organization", models.CharField(max_length=255)),
                ("certification_number", models.CharField(blank=True, max_length=100)),
                ("issue_date", models.DateField()),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "verified_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID who verified",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "certificate_document",
                    models.FileField(
                        blank=True, null=True, upload_to="certifications/%Y/%m/%d/"
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certifications",
                        to="services.serviceprovider",
                    ),
                ),
            ],
            options={
                "ordering": ["-issue_date"],
            },
        ),
        migrations.CreateModel(
            name="ServiceBooking",
            fields=[
                (
                    "profile_id",
                    models.CharField(
                        help_text="Reference to CompanyProfile ID from users service",
                        max_length=50,
                    ),
                ),
                (
                    "created_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "modified_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("booking_reference", models.CharField(max_length=20, unique=True)),
                (
                    "customer_user_id",
                    models.CharField(
                        help_text="Reference to User ID from users service",
                        max_length=50,
                    ),
                ),
                ("customer_name", models.CharField(max_length=255)),
                ("customer_email", models.EmailField(max_length=254)),
                ("customer_phone", models.CharField(max_length=20)),
                ("service_address", models.TextField()),
                ("service_city", models.CharField(max_length=100)),
                (
                    "service_instructions",
                    models.TextField(
                        blank=True,
                        help_text="Special instructions for finding the location",
                    ),
                ),
                ("scheduled_date", models.DateField()),
                ("scheduled_start_time", models.TimeField()),
                ("scheduled_end_time", models.TimeField()),
                ("estimated_duration", models.DurationField()),
                ("actual_start_time", models.DateTimeField(blank=True, null=True)),
                ("actual_end_time", models.DateTimeField(blank=True, null=True)),
                ("quoted_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "final_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "travel_charge",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=6
                    ),
                ),
                (
                    "material_cost",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=8
                    ),
                ),
                (
                    "taxes",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=8
                    ),
                ),
                ("total_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="NGN", max_length=3)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no_show", "No Show"),
                            ("rescheduled", "Rescheduled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "payment_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to payment record in payment service",
                        max_length=100,
                    ),
                ),
                ("payment_status", models.CharField(default="pending", max_length=20)),
                (
                    "service_description",
                    models.TextField(
                        blank=True, help_text="Detailed description of work to be done"
                    ),
                ),
                ("special_requirements", models.TextField(blank=True)),
                ("materials_needed", models.TextField(blank=True)),
                ("customer_notes", models.TextField(blank=True)),
                ("provider_notes", models.TextField(blank=True)),
                ("internal_notes", models.TextField(blank=True)),
                (
                    "booking_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("confirmation_date", models.DateTimeField(blank=True, null=True)),
                ("completion_date", models.DateTimeField(blank=True, null=True)),
                ("cancellation_date", models.DateTimeField(blank=True, null=True)),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to="services.service",
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to="services.serviceprovider",
                    ),
                ),
            ],
            options={
                "ordering": ["-booking_date"],
            },
        ),
        migrations.CreateModel(
            name="ServiceAvailability",
            fields=[
                (
                    "profile_id",
                    models.CharField(
                        help_text="Reference to CompanyProfile ID from users service",
                        max_length=50,
                    ),
                ),
                (
                    "created_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "modified_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("is_available", models.BooleanField(default=True)),
                ("is_blocked", models.BooleanField(default=False)),
                ("block_reason", models.CharField(blank=True, max_length=255)),
                (
                    "special_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availability",
                        to="services.service",
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availability",
                        to="services.serviceprovider",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="service",
            name="provider",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="services",
                to="services.serviceprovider",
            ),
        ),
        migrations.CreateModel(
            name="ServiceReview",
            fields=[
                (
                    "profile_id",
                    models.CharField(
                        help_text="Reference to CompanyProfile ID from users service",
                        max_length=50,
                    ),
                ),
                (
                    "created_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "modified_by_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to User ID from users service",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reviewer_user_id",
                    models.CharField(
                        help_text="Reference to User ID from users service",
                        max_length=50,
                    ),
                ),
                ("reviewer_name", models.CharField(max_length=255)),
                (
                    "rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255)),
                ("comment", models.TextField()),
                (
                    "quality_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "timeliness_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "communication_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "value_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "professionalism_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("would_recommend", models.BooleanField(blank=True, null=True)),
                ("would_book_again", models.BooleanField(blank=True, null=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_published", models.BooleanField(default=True)),
                ("response", models.TextField(blank=True)),
                ("response_date", models.DateTimeField(blank=True, null=True)),
                (
                    "booking",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review",
                        to="services.servicebooking",
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="services.serviceprovider",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="services.service",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="serviceprovider",
            index=models.Index(
                fields=["profile_id", "is_active"],
                name="services_se_profile_6a061c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceprovider",
            index=models.Index(
                fields=["is_active", "is_featured"],
                name="services_se_is_acti_7fe73d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceprovider",
            index=models.Index(
                fields=["average_rating"], name="services_se_average_bed5a5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicebooking",
            index=models.Index(
                fields=["profile_id", "status"], name="services_se_profile_006e05_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicebooking",
            index=models.Index(
                fields=["customer_user_id"], name="services_se_custome_bf50b3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicebooking",
            index=models.Index(
                fields=["provider", "scheduled_date"],
                name="services_se_provide_9bcef9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="servicebooking",
            index=models.Index(
                fields=["booking_reference"], name="services_se_booking_297c5e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="serviceavailability",
            index=models.Index(
                fields=["provider", "date"], name="services_se_provide_7d15f1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="serviceavailability",
            index=models.Index(
                fields=["date", "is_available"], name="services_se_date_c9df8a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="serviceavailability",
            unique_together={("provider", "date", "start_time")},
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["provider", "is_active"], name="services_se_provide_679d85_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["category", "service_type"],
                name="services_se_categor_a86942_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["pricing_type"], name="services_se_pricing_c4af57_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="service",
            unique_together={("provider", "slug")},
        ),
        migrations.AddIndex(
            model_name="servicereview",
            index=models.Index(
                fields=["service", "is_published"],
                name="services_se_service_f2b26f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="servicereview",
            index=models.Index(
                fields=["provider", "is_published"],
                name="services_se_provide_4787ac_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="servicereview",
            index=models.Index(
                fields=["reviewer_user_id"], name="services_se_reviewe_0a45b4_idx"
            ),
        ),
    ]
